on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

name: CI

jobs:
  phpunit:
    runs-on: self-hosted
    container:
      image: kirschbaumdevelopment/laravel-test-runner:8.1

    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 3
        
      pgsql:
        image: trans7/postgres-14-alpine-tds:latest
        env:
          POSTGRES_USER: sail
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testing
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

      # minio:
      #   image: 'minio/minio:latest'
      #   ports:
      #     - 9000:9000
      #     - 8900:8900
      #   env:
      #     MINIO_ROOT_USER: sail
      #     MINIO_ROOT_PASSWORD: password
      #   options: --health-cmd "curl http://minio:9000/minio/health/live" --health-interval 10s --health-timeout 5s --health-retries 3

    steps:
    # - name: Setup minio
    #   run: |
    #     wget https://dl.min.io/client/mc/release/linux-amd64/mc
    #     chmod +x ./mc
    #     ./mc alias set minio http://127.0.0.1:9000 sail password
    #     ./mc mb --ignore-existing minio/hris

    - uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        echo "::set-output name=dir::$(composer config cache-files-dir)"

    - uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Get yarn cache
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install composer dependencies
      run: |
        composer install --no-scripts

    - name: Prepare Laravel Application
      run: |
        cp .ci.env .env
        php artisan key:generate
      env:
        DB_HRIS_HOST: ${{ secrets.DB_HRIS_HOST }}
        DB_HRIS_PORT: ${{ secrets.DB_HRIS_PORT }}
        DB_HRIS_DATABASE: ${{ secrets.DB_HRIS_DATABASE }}
        DB_HRIS_USERNAME: ${{ secrets.DB_HRIS_USERNAME }}
        DB_HRIS_PASSWORD: ${{ secrets.DB_HRIS_PASSWORD }}

    - name: Install front-end dependencies
      run: |
        npm install
        npm run build

    - name: Run Testsuite
      run: vendor/bin/phpunit tests/
      env:
        DB_HRIS_HOST: ${{ secrets.DB_HRIS_HOST }}
        DB_HRIS_PORT: ${{ secrets.DB_HRIS_PORT }}
        DB_HRIS_DATABASE: ${{ secrets.DB_HRIS_DATABASE }}
        DB_HRIS_USERNAME: ${{ secrets.DB_HRIS_USERNAME }}
        DB_HRIS_PASSWORD: ${{ secrets.DB_HRIS_PASSWORD }}
